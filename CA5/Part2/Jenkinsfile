pipeline {
    agent any

    environment {
        DOCKER_HUB_CREDENTIALS = credentials('docker-hub-credentials')
        IMAGE_NAME = 'my-tomcat-app'
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out the code...'
                git 'https://github.com/TiagoPires25/devops-23-24-JPE-PSM-1231862'
            }
        }

        stage('Assemble') {
            steps {
                echo 'Assembling the project...'
                dir('CA2/Part1/gradle_basic_demo') {
                    sh 'chmod +x gradlew'
                    sh './gradlew clean assemble -x test'
                }
            }
        }

        stage('Test') {
            steps {
                echo 'Testing the project...'
                dir('CA2/Part1/gradle_basic_demo') {
                    sh './gradlew test'
                }
            }
            post {
                always {
                    junit 'CA2/Part1/gradle_basic_demo/build/test-results/test/*.xml'
                }
            }
        }

        stage('Javadoc') {
            steps {
                echo 'Generating Javadoc...'
                dir('CA2/Part1/gradle_basic_demo') {
                    sh './gradlew javadoc'
                }
            }
            post {
                always {
                    publishHTML(target: [
                        reportDir: 'CA2/Part1/gradle_basic_demo/build/docs/javadoc',
                        reportFiles: 'index.html',
                        reportName: 'Javadoc'
                    ])
                }
            }
        }

        stage('Archive') {
            steps {
                echo 'Archiving the project...'
                archiveArtifacts artifacts: 'CA2/Part1/gradle_basic_demo/build/libs/*.war', fingerprint: true
            }
        }

        stage('Publish Image') {
            steps {
                echo 'Publishing Docker Image...'
                script {
                    dir('CA2/Part1/gradle_basic_demo') {
                        def app = docker.build("${IMAGE_NAME}:${env.BUILD_NUMBER}", '-f Dockerfile .')
                        docker.withRegistry('https://index.docker.io/v1/', DOCKER_HUB_CREDENTIALS) {
                            app.push("${env.BUILD_NUMBER}")
                            app.push("latest")
                        }
                    }
                }
            }
        }
    }
}
